#include <ros/ros.h>
#include <iostream>
#include <fstream>
#include <limits>

#include <tf/transform_datatypes.h>
#include <tf/LinearMath/Transform.h>
#include <tf/transform_listener.h>
#include <math.h>

#include <map>
#include <vector>
#include <string>
#include "hector_navigation/Map.h"
#include "hector_navigation/Coordinate.h"
#include "hector_navigation/StructKeyMap.h"
#include "hector_navigation/Mesh.h"
#include "hector_navigation/Row.h"
#include "hector_navigation/Size.h"
//using namespace std;

#define PI 3.14159265

class SphereMap
{

public:
    SphereMap()
    {
    
     sub_map = nh.subscribe<hector_navigation::Map>("Local_Map", 1, &SphereMap::callback_map,this);
     mesh_pub = nh.advertise<hector_navigation::Mesh>("Sphere_Mesh", 1);
    }

    void callback_map(const hector_navigation::Map::ConstPtr& inputMap);



    typedef std::map<sphere,int> sphere_;//[(theta,phi,r),(cv)]
    typedef std::map<Vector,double> vector_;//[(THETA,PHI),(mv)]
    typedef std::vector<Vector>   direction;


private:
    ros::NodeHandle nh;
    ros::Subscriber sub_map;
    ros::Publisher mesh_pub;
};



void SphereMap::callback_map(const hector_navigation::Map::ConstPtr& inputMap)
{

    tf::TransformListener listener;
    tf::StampedTransform transform2;
    listener.waitForTransform("world", "base_link", ros::Time(0),ros::Duration(3.0));
    listener.lookupTransform("world", "base_link", ros::Time(0), transform2);
    double x= round(transform2.getOrigin().x()/0.1);//UAV location in gloabl 3D grid frame
    double y= round(transform2.getOrigin().y()/0.1);
    double z= round(transform2.getOrigin().z()/0.1);    


//convert local_map into sphere_map

    hector_navigation::Map local_map;
    sphere_ sphere_map;//[theta,phi,r] --[cv]
    sphere S_point;//[theta,phi,r]
    double angle1,angle2,phi_,dis, theta_,x_,y_,z_;
    int cv_;

    local_map.points=inputMap->points;
    local_map.cv=inputMap ->cv;

    for (int i = 0; i<local_map.cv.size(); i++)
   {
	    x_ =local_map.points[i].x;
	    y_ =local_map.points[i].y;
	    z_ =local_map.points[i].z;
            cv_=local_map.cv[i];
 
            dis=sqrt(pow(x_-x,2.0)+pow(y_-y,2.0)+pow(z_-z,2.0));

                   //sphere space radius 1.85m 
                   //UAV radius 0.35m 
 
	    if (dis<=18.5)//local_map to sphere space, 70% of sensor range
	       {
                    //3d grid to sphere --theta
		angle2 =acos((z_-z)/sqrt(pow(x_-x,2.0)+pow(y_-y,2.0)+pow(z_-z,2.0)));
	        theta_=angle2*180/PI;
                
                if (theta_ >25.0 && theta_ <=155.0)
		  {
		  S_point.Theta=ceil((theta_-25)/10);
		  }

                   //3d grid to sphere --phi
               angle1 = atan2(y_-y,x_-x);
               if (angle1<=0  )
		  {
		  phi_=ceil((angle1*180/PI+360)/10);
		  }
               else
		  {
		  phi_=ceil(angle1*180/PI/10);
		  }
                S_point.Phi=phi_;

                     //3d grid to sphere --R
                S_point.R=dis;

	        sphere_map[S_point]=cv_;
        

	        }
     }


//calcul Vector MV 

   vector_ vector_mv;//[THETA,PHI]--[MV]
   sphere_::iterator iter;
   Vector Index;//[THETA,PHI]
   sphere S_point1;//[theta,phi,r]
   for(iter=sphere_map.begin(); iter != sphere_map.end(); ++iter)
{
     S_point1=iter -> first;
     Index.PHI=S_point1.Phi;
     Index.THETA=S_point1.Theta;

     double value=vector_mv[Index];
     value=value+pow((iter -> second),2.0)*(10-0.5*S_point1.R);
     vector_mv[Index]=value;
 
}


//weight of Vector mv
/*Vector index1, index2,index3,index4,index5,index6,index7,index8,index9; 

for (int j=1; j<37;j++)
{
  for(int k=1; k<14;k++)
   {
     index1.PHI=j-4;
     index1.THETA=k;
     index2.PHI=j-3;
     index2.THETA=k;
     index3.PHI=j-2;
     index3.THETA=k;
     index4.PHI=j-1;
     index4.THETA=k;
     index5.PHI=j;
     index5.THETA=k;
     index6.PHI=j+1;
     index6.THETA=k;
     index7.PHI=j+2;
     index7.THETA=k;
     index8.PHI=j+3;
     index8.THETA=k;
     index9.PHI=j+4;
     index9.THETA=k;

     vector_mv[index5]=(vector_mv[index1]*1+vector_mv[index2]*2+vector_mv[index3]*3+vector_mv[index4]*4+vector_mv[index5]*5+vector_mv[index6]*4+vector_mv[index7]*3+vector_mv[index8]*2+vector_mv[index9]*1)/11;


 
   }
}*/

// find the largest mv 
vector_::iterator it;
unsigned currentMax = 0;
for(it=vector_mv.begin(); it != vector_mv.end(); ++it)
{
	if (it -> second > currentMax )
	{
	    currentMax= it -> second;
	}
}

		const char *path11="/home/lin/Desktop/mv.dat";
		ofstream file11(path11);

//2D array structure store binary value
hector_navigation::Row ROW;
hector_navigation::Mesh MESH;
Vector index_mesh;
int mesh[13][36];
for (int j=1; j<14;j++)
{
  for(int k=1; k<37;k++)
   {
     
    index_mesh.PHI=k;
    index_mesh.THETA=j;
    if (vector_mv[index_mesh]>(currentMax*0.25))
	{
	 mesh[j-1][k-1]=0;
	}
    else
	{
	mesh[j-1][k-1]=1;
	}
   
    ROW.row.push_back(mesh[j-1][k-1]);
		file11<<vector_mv[index_mesh]<<" ";
    }
            
 MESH.column.push_back(ROW);
 ROW.row.clear();
		file11<<"\n";
}

MESH.header.stamp=ros::Time::now();
mesh_pub.publish(MESH);



}

int main(int argc, char **argv)
{
     ros::init(argc, argv, "sphere_map_node");
     SphereMap  sphereproject;


     ros::spin();
   

     return 0;
}










