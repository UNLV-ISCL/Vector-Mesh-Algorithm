#include "pcl_ros/point_cloud.h"
#include <pcl/point_types.h>
#include <pcl_ros/filters/filter.h>
#include <ros/ros.h>
#include <iostream>
#include <fstream>
#include <limits>

#include <tf/transform_datatypes.h>
#include <tf/LinearMath/Transform.h>
#include "pcl_ros/transforms.h"
#include <pcl_ros/impl/transforms.hpp>
#include <tf/transform_listener.h>

#include <map>
#include <string>
#include "hector_navigation/Map.h"
//#include "hector_navigation/create_map.h"
using namespace std;

typedef std::map<std::string,int> global_map;

//double aa;

hector_navigation::Map global_map;

void callback_map(const hector_navigation::Map::ConstPtr& inputMap)
{
 //aa=aa+1.0;
    global_map.coordinate=inputMap ->coordinate;
    global_map.cv=inputMap ->cv;

}

void callback(const pcl::PointCloud<pcl::PointXYZ>::ConstPtr& inputCloud )
{
   //convert PointCLoud2 to PoiintXYZ and remove NAN data
    pcl::PointCloud<pcl::PointXYZ>::Ptr outputCloud1(new pcl::PointCloud<pcl::PointXYZ>);
    vector<int> indices;
    pcl::removeNaNFromPointCloud(*inputCloud,*outputCloud1, indices);


    // transform obstacle XYZ from Kinect frame into base_link frame
    tf::Transform transform1;
    transform1.setOrigin( tf::Vector3(0.05,-0.02,0.2) );
    tf::Quaternion quat;
    quat.setRPY(-1.5707963, 0.0, -1.5707963);
    transform1.setRotation(quat);
    pcl::PointCloud<pcl::PointXYZ>::Ptr outputCloud2(new pcl::PointCloud<pcl::PointXYZ>);
    pcl_ros::transformPointCloud(*outputCloud1,*outputCloud2, transform1);

    //transform obstacle XYZ from base_link into world
    tf::TransformListener listener;
    tf::StampedTransform transform2;
    tf::StampedTransform transform3;
    tf::StampedTransform transform4;
    tf::Transform transform5;
    tf::Quaternion Q;
    tf::Vector3 V;

    listener.waitForTransform("base_stabilized", "base_link", ros::Time(0),ros::Duration(3.0));
    listener.lookupTransform("base_stabilized", "base_link", ros::Time(0), transform2);
    listener.waitForTransform("base_footprint", "base_stabilized", ros::Time(0),ros::Duration(3.0));
    listener.lookupTransform("base_footprint", "base_stabilized", ros::Time(0), transform3);
    listener.waitForTransform("world", "base_footprint", ros::Time(0),ros::Duration(3.0));
    listener.lookupTransform("world", "base_footprint", ros::Time(0), transform4);
    Q=transform2.getRotation();
    V.setX(transform4.getOrigin().x());
    V.setY(transform4.getOrigin().y());
    V.setZ(transform3.getOrigin().z());
    transform5.setOrigin(V);
    transform5.setRotation(Q);

    pcl::PointCloud<pcl::PointXYZ>::Ptr outputCloud3(new pcl::PointCloud<pcl::PointXYZ>);
    pcl_ros::transformPointCloud(*outputCloud2,*outputCloud3, transform5);








   /*// output XYZ data
   int cloudsize = (outputCloud3 -> width) * (outputCloud3 -> height);

   cout<<"width is " << outputCloud3 -> width <<endl;
   cout<<"height is " << outputCloud3 -> height <<endl;

   const char *path="/home/lin/Desktop/distance.dat";
   ofstream file(path);
   for(int i=0; i<cloudsize;i++)
  {
    //cout << "(x,y,z) = " << outputCloud -> points[i] << std::endl;
    file << outputCloud3  -> points[i];
   
   }

   //ROS_INFO("aa: %.2f",aa);*/
}






int main(int argc, char** argv){

	ros::init(argc, argv, "distance_publisher");
	ros::NodeHandle nh;

	std::string topic = nh.resolveName("camera/depth/points");
	uint32_t queue_size = 1;
	ros::Subscriber sub = nh.subscribe<pcl::PointCloud<pcl::PointXYZ> > (topic, queue_size, callback);


           ros::Publisher map_pub = nh.advertise<hector_navigation::Map>("Global_Map", 1);
           hector_navigation::Map global_map;  

	   global_map.coordinate.push_back("xyz");
	   global_map.coordinate.push_back("abc");
	   global_map.cv.push_back(10);
	   global_map.cv.push_back(20);

       ros::Subscriber sub_ = nh.subscribe("Global_Map", 1, callback_map);
  

        ros::Rate r(1.0);
        while(nh.ok()){
          global_map.header.stamp=ros::Time::now();
          map_pub.publish(global_map);
          ros::spinOnce(); 
          r.sleep();
         
        }

}
