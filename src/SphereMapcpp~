#include "pcl_ros/point_cloud.h"
#include <pcl/point_types.h>
#include <pcl_ros/filters/filter.h>
#include <ros/ros.h>
#include <iostream>
#include <fstream>
#include <limits>

#include <tf/transform_datatypes.h>
#include <tf/LinearMath/Transform.h>
#include "pcl_ros/transforms.h"
#include <pcl_ros/impl/transforms.hpp>
#include <tf/transform_listener.h>
#include <math.h>

#include <map>
#include <string>
#include "hector_navigation/Map.h"
#include "hector_navigation/Coordinate.h"
#include "hector_navigation/StructKeyMap.h"
#include <geometry_msgs/Twist.h>
//using namespace std;


class LocalMap
{

public:
    LocalMap()
    {
    
     sub_map = nh.subscribe<hector_navigation::Map>("Local_Map", 1, &LocalMap::callback_map,this);
     pub_vel = nh.advertise<geometry_msgs::Twist>( "cmd_vel", 1);
   }

    void callback_map(const hector_navigation::Map::ConstPtr& inputMap);

    hector_navigation::Coordinate coord;
    hector_navigation::Map global_map; 
    //position P1;
    //position P2;
    //position P3;
    //typedef std::vector<int> vector_;
    sphere S_point;
    sphere S_point1;
    histogram h_points;
    typedef std::map<sphere,int> sphere_;
    typedef std::map<histogram,double> histogram_;


private:
    ros::NodeHandle nh;
    ros::Subscriber sub_map;
    ros::Publisher pub_vel;
};

void LocalMap::callback_map(const hector_navigation::Map::ConstPtr& inputMap)
{
    tf::TransformListener listener;
    tf::StampedTransform transform2;
    listener.waitForTransform("world", "base_link", ros::Time(0),ros::Duration(3.0));
    listener.lookupTransform("world", "base_link", ros::Time(0), transform2);
    int x= round(transform2.getOrigin().x()/0.1);//UAV location in gloabl 3D grid frame
    int y= round(transform2.getOrigin().y()/0.1);
    int z= round(transform2.getOrigin().z()/0.1);

    global_map.points=inputMap->points;
    global_map.cv=inputMap ->cv;

//convert global_grid_map into local_sphere_map

    sphere_ sphere_map;
    double angle1,angle2,phi_,dis;
    int cv_,theta_,x_,y_,z_;
    //float x_,y_,z_;
	   //const char *path="/home/lin/Desktop/test.dat";
	   //ofstream file(path);
    for (int i = 0; i<global_map.cv.size(); i++)
   {
	    x_ =global_map.points[i].x;
	    y_ =global_map.points[i].y;
	    z_ =global_map.points[i].z;
            cv_=global_map.cv[i];
 
            dis=sqrt(pow(x_-x,2.0)+pow(y_-y,2.0)+pow(z_-z,2.0));

                   //sphere space radius 1.85m ->
                   //(UAV radius 0.35m, safe zone is 0.5m outward to UAV, detection area is 1m) 
 
	    if (dis<=18.5)//local_map to sphere space
	       {
                   //3d grid to sphere --theta
               angle1 = atan2(y_-y,x_-x);
               if (angle1<0  )
		  {
		  theta_=round((angle1*180/3.1515926+360)/10)+1;
		  }
               else
		  {
		  theta_=round(angle1*180/3.1515926/10)+1;
		  }
                if (theta_==37)
	        {
	        theta_=1;
	        }
                S_point.Theta=theta_;
                    //3d grid to sphere --phi
		angle2 =atan(sqrt(pow(x_-x,2.0)+pow(y_-y,2.0))/(z_-z));
		if (angle2<0)
		{
		phi_=angle2*180/3.14159265+180;
		}
		else
		{
	        phi_=angle2*180/3.14159265;
		}
                
                if (phi_ >=25.0 && phi_ <155.0)
		  {
		  S_point.Phi=floor((phi_-25)/10)+1;
		  }
                     //3d grid to sphere --R
                S_point.R=sqrt(pow(x_-x,2.0)+pow(y_-y,2.0)+pow(z_-z,2.0));

	       sphere_map[S_point]=cv_;//sphere frame[theta,phi,r] ->[cv]
        
                 /*file <<S_point.Theta<<" ";
                 file <<S_point.Phi<<" ";
                 file <<S_point.R<<" ";
                 file <<cv_<<"_ ";*/

	        }
     }


//sector histogram
    
   histogram_ sector_histogram;
   sphere_::iterator iter;
   for(iter=sphere_map.begin(); iter != sphere_map.end(); ++iter)
{
     S_point1=iter -> first;
     h_points.THETA=S_point1.Theta;
     h_points.PHI=S_point1.Phi;

     double value=sector_histogram[ h_points];
     value=value+pow(iter -> second,2.0)*(10-0.3*S_point1.R);
}

histogram mpoint1, mpoint2,mpoint3,mpoint4,mpoint5,mpoint6,mpoint7,mpoint8,mpoint9; //weight of histogram value
for (int j=1; j<37;j++)
{
  for(int k=1; k<14;k++)
   {
     mpoint1.THETA=j-4;
     mpoint1.PHI=k;
     mpoint2.THETA=j-3;
     mpoint2.PHI=k;
     mpoint3.THETA=j-2;
     mpoint3.PHI=k;
     mpoint4.THETA=j-1;
     mpoint4.PHI=k;
     mpoint5.THETA=j;
     mpoint5.PHI=k;
     mpoint6.THETA=j+1;
     mpoint6.PHI=k;
     mpoint7.THETA=j+2;
     mpoint7.PHI=k;
     mpoint8.THETA=j+3;
     mpoint8.PHI=k;
     mpoint9.THETA=j+4;
     mpoint9.PHI=k;


     sector_histogram[mpoint5]=(sector_histogram[mpoint1]*1+sector_histogram[mpoint2]*2+sector_histogram[mpoint3]*3+sector_histogram[mpoint4]*4+sector_histogram[mpoint5]*5+sector_histogram[mpoint6]*4+sector_histogram[mpoint7]*3+sector_histogram[mpoint8]*2+sector_histogram[mpoint9]*1)/11;


   }
}






     geometry_msgs::Twist moveCommand;

     moveCommand.linear.z = 0.3;
     pub_vel.publish(moveCommand);




}

int main(int argc, char **argv)
{
     ros::init(argc, argv, "local_map_node");

     LocalMap  Localproject;

     ros::spin();
   

     return 0;
}










